---
title: 计算机中数的表示及其运算
date: 2016/11/06
categories:
- 计算机原理
tags: 
- 二进制
- 整数
- 浮点数
---
对于有一定编程经验的程序员来说，大多数编程语言提供的数据类型基本均包含如下几种：字符，布尔值，整型，浮点型，其中整型也可以分为无符号整型和有符号整型，这也是计算机底层所支持的基本数据类型。这些数据类型在机器层面是如何存储的？这是本文将要探讨的问题，当然本文只会给出最终的结论，具体的推导还需要结合书本详细的推理与论证。

寻址方式
====
在讨论一个数之前，我们首先需要在计算机中找到这个数，那如何找到这个数，也即一个程序对象？当然是数的内存地址加上数据长度。所有的信息在机器中都是以二进制表示的，处理器在找到数据存放的起始地址，并读取相应的长度后，根据不同的解释规则，就能获取到我们所需要的数据。<br>
大多数计算机使用8位的块，或者说字节，来作为最小的可寻址的存储器单位，而不是在存储器中访问单独的位。换句话说，我们在访问存储器的内容时，最小的访问单位一般是字节。在我们编程的时候，往往会把虚拟存储器（virtual memory）抽象为一个字节数组，而每一个数组内的元素或者说字节都有唯一的地址（address），这些地址的集合就被称作虚拟地址空间。虚拟地址空间是为了给机器级的程序一个概念上的映像，实际上为了提供这个映像，内部的实现是非常复杂的。<br>
 每台计算机都有一个字长（word size），用于指明整数和指针数据的标准大小（nominal size）。而由于虚拟地址空间中的地址就是使用一个字来表示的，因此操作系统中的字长就决定了虚拟地址空间的大小。 比如32位操作系统下，最大内存就是2<sup>32</sup> = 4 \* 2<sup>10</sup> \* 2<sup>10</sup> \* 2<sup>10</sup> B = 4GB，而在64位操作系统下最终得到的结果是2<sup>34</sup>GB。<br>
 <!-- more -->
知道了内存地址与字长我们就可以定位到一个具体的程序对象了，列如，假设一个类型为int的变量x的地址为0x100,也就是说，地址表达式&x的值为0x100。那么，x的4个字节讲被存储在存储器的0x100,0x101,0x102,0x103位置。当然，数据的存储还有大端与小端之分，涉及到的数在机器中是如何存放的，与我们所要讨论的问题暂时关系不大。

## 数据长度
由于计算机位数，也即字长的不同，会造成在数据类型的存储上，采用的位数略有不同，下表是在32位和64位机器下，C语言当中的数字数据类型需要的位数。<br>
![](/images/2016-11/digit_length.jpg)
<br>
数据分类
=====
有了地址，知道了数据长度，我们再来看看无符号整数，有符号整数，浮点数在机器中是如何表示的。

## 无符号整数
假设一个整数数据类型有w位，直接将这个整型装换成二进制表示，这个二进制就是无符号的整数表示，无符号整数在机器中是通过原码存储的。无符号数可以表示的数据范围为   0 <= x <= 2<sup>w</sub>-1

## 有符号整数
有符号整数在机器中是通过补码表示的，即除符号位之外，原码取反加1，在我们的程序中如果没有明确指明数据类型为unsigned，都默认是有符号数且使用补码表示。补码可以表示的数据范围为：
-2<sup>w-1</sup> <= x <= 2<sup>w-1</sup>-1

## 浮点数
浮点数采用了IEEE 754的标准表示法，具体可以参考此篇文章：<br>
[IEEE 754浮点数标准](http://www.cnblogs.com/zuoxiaolong/p/computer11.html)<br>
[十进制转换成二进制](http://www.cnblogs.com/wodehuajianrui/archive/2009/03/18/1415173.html)<br>
[数据类型转换溢出](http://www.cnblogs.com/qdlgx/archive/2008/09/10/1288500.html)
